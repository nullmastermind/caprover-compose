captainVersion: 4
caproverOneClickApp:
  displayName: triggerdotdev
  description: A developer-first open source background jobs framework
  instructions:
    start: |-
      Trigger.dev is an open source background jobs framework. It provides a complete platform for building, deploying and managing background jobs with features like:
      - Job scheduling and queuing
      - Real-time job monitoring
      - Automatic retries
      - Distributed job execution
      - OpenTelemetry integration
    end: |-
      Trigger.dev has been successfully deployed! 

      Important next steps:
      1. Enable WebSocket Support in the HTTP Settings
      2. Configure your environment variables in the App Config
      3. Make sure all services are running properly

      Your Trigger.dev instance will be available at: http://$$cap_appname.$$cap_root_domain
  variables:
    - id: $$cap_ghcrio_triggerdotdev_triggerdev_version
      label: Trigger.dev Version
      defaultValue: "v3"
      description: Version of the Trigger.dev main application
    - id: $$cap_postgres_version
      label: PostgreSQL Version
      defaultValue: "16"
      description: Version of PostgreSQL to use
      validRegex: /^\d+(\.\d+)*$/
    - id: $$cap_redis_version
      label: Redis Version
      defaultValue: "7"
      description: Version of Redis to use
      validRegex: /^\d+(\.\d+)*$/
    - id: $$cap_ghcrio_triggerdotdev_provider_docker_version
      label: ghcr.io/triggerdotdev/provider/docker version
      defaultValue: "v3"
    - id: $$cap_platform_secret
      label: Platform Secret
      description: Secret key used for internal service authentication
      defaultValue: $$cap_gen_random_hex(32)
      validRegex: /.{32,}/
    - id: $$cap_platform_ws_port
      label: PLATFORM_WS_PORT
      defaultValue: "3030"
    - id: $$cap_secure_connection
      label: SECURE_CONNECTION
      defaultValue: "false"
    - id: $$cap_ghcrio_triggerdotdev_coordinator_version
      label: ghcr.io/triggerdotdev/coordinator version
      defaultValue: "v3"
    - id: $$cap_electricsql_electric_version
      label: electricsql/electric version
      defaultValue: "latest"
    - id: $$cap_postgres_user
      label: PostgreSQL Username
      defaultValue: trigger
      description: Username for PostgreSQL database
    - id: $$cap_postgres_password
      label: PostgreSQL Password
      defaultValue: $$cap_gen_random_hex(16)
      description: Password for PostgreSQL database
    - id: $$cap_postgres_db
      label: PostgreSQL Database
      defaultValue: trigger
      description: Name of the PostgreSQL database
    - id: $$cap_redis_password
      label: Redis Password
      defaultValue: $$cap_gen_random_hex(16)
      description: Password for Redis
services:
  $$cap_appname-webapp:
    image: ghcr.io/triggerdotdev/trigger.dev:$$cap_ghcrio_triggerdotdev_triggerdev_version
    environment:
      V3_ENABLE: true
      INTERNAL_OTEL_TRACE_DISABLED: 1
      INTERNAL_OTEL_TRACE_LOGGING_ENABLED: 0
      RUNTIME_PLATFORM: docker-compose
      NODE_ENV: production
      DEFAULT_ORG_EXECUTION_CONCURRENCY_LIMIT: 100
      DEFAULT_ENV_EXECUTION_CONCURRENCY_LIMIT: 100
      POSTGRES_USER: $$cap_postgres_user
      POSTGRES_PASSWORD: $$cap_postgres_password
      POSTGRES_DB: $$cap_postgres_db
      DATABASE_HOST: srv-captain--$$cap_appname-postgres
      DATABASE_URL: postgres://$$cap_postgres_user:$$cap_postgres_password@srv-captain--$$cap_appname-postgres/$$cap_postgres_db
      DIRECT_URL: postgres://$$cap_postgres_user:$$cap_postgres_password@srv-captain--$$cap_appname-postgres/$$cap_postgres_db
      REDIS_HOST: srv-captain--$$cap_appname-redis
      REDIS_PORT: 6379
      REDIS_TLS_DISABLED: true
      REDIS_URL: redis://:$$cap_redis_password@srv-captain--$$cap_appname-redis:6379
      PLATFORM_SECRET: $$cap_platform_secret
      MAGIC_LINK_SECRET: secret
      SESSION_SECRET: secret
      ENCRYPTION_KEY: ae13021afef0819c3a307ad487071c06
      PROVIDER_SECRET: provider-secret
      COORDINATOR_SECRET: coordinator-secret
    caproverExtra:
      containerHttpPort: "3030"
  $$cap_appname-postgres:
    image: postgres:$$cap_postgres_version
    environment:
      POSTGRES_USER: $$cap_postgres_user
      POSTGRES_PASSWORD: $$cap_postgres_password
      POSTGRES_DB: $$cap_postgres_db
    command:
      - -c
      - wal_level=logical
    volumes:
      - $$cap_appname-postgres-data:/var/lib/postgresql/data/
    caproverExtra:
      notExposeAsWebApp: true
  $$cap_appname-redis:
    image: redis:$$cap_redis_version
    command: redis-server --requirepass $$cap_redis_password
    volumes:
      - $$cap_appname-redis-data:/data
    caproverExtra:
      notExposeAsWebApp: true
  $$cap_appname-docker-provider:
    image: ghcr.io/triggerdotdev/provider/docker:$$cap_ghcrio_triggerdotdev_provider_docker_version
    environment:
      PLATFORM_SECRET: $$cap_platform_secret
      PLATFORM_HOST: srv-captain--$$cap_appname-webapp
      PLATFORM_WS_PORT: "3030"
      SECURE_CONNECTION: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    caproverExtra:
      containerHttpPort: "9020"
  $$cap_appname-coordinator:
    image: ghcr.io/triggerdotdev/coordinator:$$cap_ghcrio_triggerdotdev_coordinator_version
    environment:
      PLATFORM_SECRET: $$cap_platform_secret
      PLATFORM_HOST: srv-captain--$$cap_appname-webapp
      PLATFORM_WS_PORT: "3030"
      SECURE_CONNECTION: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    caproverExtra:
      containerHttpPort: "9020"
  $$cap_appname-electric:
    image: electricsql/electric:$$cap_electricsql_electric_version
    environment:
      DATABASE_URL: postgres://$$cap_postgres_user:$$cap_postgres_password@srv-captain--$$cap_appname-postgres/$$cap_postgres_db?sslmode=disable
    caproverExtra:
      containerHttpPort: "3000"
